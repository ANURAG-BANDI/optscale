""""remove_root_user"

Revision ID: 86bb9ebc3c20
Revises: 698a0e1e6855
Create Date: 2023-04-27 14:01:43.278056

"""
import random
import string
import uuid
import hashlib
import sqlalchemy as sa
from alembic import op
from datetime import datetime
from sqlalchemy.orm import Session
from auth_server.utils import hash_password
from auth_server.models.models import gen_salt


# revision identifiers, used by Alembic.
revision = '86bb9ebc3c20'
down_revision = '698a0e1e6855'
branch_labels = None
depends_on = None

ROOT_USER_EMAIL = 'root@hystax.com'
ROOT_USER_NAME = 'root'
ROOT_USER_PASSWORD = 'p@ssw0rd'


def upgrade():
    user_table = sa.table('user',
                          sa.Column('id', sa.String(36)),
                          sa.Column('email', sa.String(256)))
    assignment_table = sa.table('assignment',
                                sa.Column('user_id', sa.String(36)))
    tokens_table = sa.table('token',
                            sa.Column('user_id', sa.String(36)))
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        user_id = session.execute(sa.select([user_table.c.id]).where(
            user_table.c.email == ROOT_USER_EMAIL)).scalar()
        if user_id:
            session.execute(sa.delete(assignment_table).where(
                assignment_table.c.user_id == user_id))
            session.execute(sa.delete(tokens_table).where(
                tokens_table.c.user_id == user_id))
            session.execute(sa.delete(user_table).where(
                user_table.c.id == user_id))
            session.commit()
    except Exception as exc:
        session.rollback()
        raise exc
    finally:
        session.close()


def downgrade():
    user_table = sa.table('user',
                          sa.Column('id', sa.String(36)),
                          sa.Column('created_at', sa.Integer()),
                          sa.Column('deleted_at', sa.Integer()),
                          sa.Column('type_id', sa.Integer()),
                          sa.Column('email', sa.String(256)),
                          sa.Column('password', sa.String(20)),
                          sa.Column('salt', sa.String(20)),
                          sa.Column('scope_id', sa.String(36), nullable=True),
                          sa.Column('display_name', sa.String(256)),
                          sa.Column('is_active', sa.Boolean()),
                          sa.Column('slack_connected', sa.Boolean()),
                          sa.Column('is_password_autogenerated', sa.Boolean()),
                          sa.Column('jira_connected', sa.Boolean()))
    assignment_table = sa.table('assignment',
                                sa.Column('id', sa.String(36)),
                                sa.Column('user_id', sa.String(36)),
                                sa.Column('created_at', sa.Integer()),
                                sa.Column('deleted_at', sa.Integer()),
                                sa.Column('type_id', sa.Integer()),
                                sa.Column('role_id', sa.Integer()),
                                sa.Column('resource_id', sa.String(36),
                                          nullable=True))
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        user_id = session.execute(sa.select([user_table.c.id]).where(
            user_table.c.email == ROOT_USER_EMAIL)).scalar()
        if not user_id:
            now = int(datetime.utcnow().timestamp())
            user_id = str(uuid.uuid4())
            salt = gen_salt()
            session.execute(sa.insert(user_table).values(
                id=user_id, email=ROOT_USER_EMAIL, created_at=now, deleted_at=0,
                display_name=ROOT_USER_NAME, type_id=1,
                password=hash_password(ROOT_USER_PASSWORD, salt),
                salt=gen_salt(), scope_id=None, is_active=True,
                slack_connected=False, is_password_autogenerated=False,
                jira_connected=False))
            assignment_id = str(uuid.uuid4())
            session.execute(sa.insert(assignment_table).values(
                id=assignment_id, created_at=now, deleted_at=0,
                user_id=user_id, type_id=1, role_id=2, resource_id=None))
            session.commit()
    except Exception as exc:
        session.rollback()
        raise exc
    finally:
        session.close()
